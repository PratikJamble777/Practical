
#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

struct Item {
    int value, weight;
    
    // Constructor to initialize value and weight
    Item(int v, int w) : value(v), weight(w) {}
};

// Comparison function to sort items based on value-to-weight ratio
bool compare(Item a, Item b) {
    double r1 = (double)a.value / a.weight;
    double r2 = (double)b.value / b.weight;
    return r1 > r2;
}

// Function to calculate the maximum value that can be put in a knapsack
double fractionalKnapsack(int capacity, vector<Item>& items) {
    // Sort items by value-to-weight ratio
    sort(items.begin(), items.end(), compare);

    double maxValue = 0.0;
    
    for (const auto& item : items) {
        if (capacity >= item.weight) {
            // If the entire item can be taken, take it
            capacity -= item.weight;
            maxValue += item.value;
        } else {
            // Take the fraction of the remaining capacity
            maxValue += item.value * ((double)capacity / item.weight);
            break;
        }
    }

    return maxValue;
}

int main() {
    int n, capacity;
    cout << "Enter the number of items: ";
    cin >> n;
    
    vector<Item> items;
    for (int i = 0; i < n; i++) {
        int value, weight;
        cout << "Enter value and weight for item " << i + 1 << ": ";
        cin >> value >> weight;
        items.emplace_back(value, weight);
    }
    
    cout << "Enter the capacity of the knapsack: ";
    cin >> capacity;
    
    double maxValue = fractionalKnapsack(capacity, items);
    cout << "The maximum value that can be obtained in the knapsack is: " << maxValue << endl;

    return 0;
}
