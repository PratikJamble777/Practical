#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

// Function to solve 0-1 Knapsack using dynamic programming
int knapsack(int capacity, const vector<int>& weights, const vector<int>& values, int n) {
    // Create a DP table with dimensions (n+1) x (capacity+1)
    vector<vector<int>> dp(n + 1, vector<int>(capacity + 1, 0));

    // Fill the DP table
    for (int i = 1; i <= n; i++) {
        for (int w = 0; w <= capacity; w++) {
            if (weights[i - 1] <= w) {
                // Choose the maximum of including or excluding the current item
                dp[i][w] = max(dp[i - 1][w], dp[i - 1][w - weights[i - 1]] + values[i - 1]);
            } else {
                dp[i][w] = dp[i - 1][w];
            }
        }
    }

    // The maximum value is in dp[n][capacity]
    return dp[n][capacity];
}

int main() {
    int n, capacity;
    cout << "Enter the number of items: ";
    cin >> n;

    vector<int> values(n), weights(n);

    // Input values and weights
    for (int i = 0; i < n; i++) {
        cout << "Enter value and weight for item " << i + 1 << ": ";
        cin >> values[i] >> weights[i];
    }

    // Input capacity of knapsack
    cout << "Enter the capacity of the knapsack: ";
    cin >> capacity;

    // Solve knapsack problem
    int maxValue = knapsack(capacity, weights, values, n);
    cout << "The maximum value that can be obtained in the knapsack is: " << maxValue << endl;

    return 0;
}
