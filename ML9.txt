import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn import metrics
from sklearn.metrics import confusion_matrix


df=pd.read_csv("C:/Users/adity/Downloads/archive (6)/diabetes.csv")

df

df.shape

df.isnull().any().value_counts()

df.columns

df_x=df.drop(columns="Outcome",axis=1)
df_y=df["Outcome"]


from sklearn.preprocessing import StandardScaler
scale=StandardScaler()
scaledX=scale.fit_transform(df_x)


from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test=train_test_split(scaledX,df_y,test_size=0.2,random_state=42)


from sklearn.neighbors import KNeighborsClassifier
knn=KNeighborsClassifier(n_neighbors=7)
knn.fit(x_train,y_train)
y_pred=knn.predict(x_test)

cs=metrics.confusion_matrix(y_test,y_pred)
print("Confusion matrix " ,cs) 

cnf_matrix=confusion_matrix(y_test,y_pred)
p=sns.heatmap(pd.DataFrame(cnf_matrix),annot=True,cmap="YlGnBu",fmt='g')
plt.title("confusion matrix" ,y=1.1)
plt.ylabel("Actual value")
plt.xlabel("prediucted value")


ac=metrics.accuracy_score(y_test,y_pred)
print("accuracy ",ac)

pr=metrics.precision_score(y_test,y_pred)
print("precision",pr)

er=1-ac
print("error",er)

r=metrics.recall_score(y_test,y_pred)
print("recall",r)

c=metrics.classification_report(y_test,y_pred)
print("report",c)

